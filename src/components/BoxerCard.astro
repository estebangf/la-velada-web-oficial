---
const { id, name } = Astro.props;
---

<a
  class="boxer-card inline-block transition focus:-translate-y-3 hover:-translate-y-3 w-10 sm:w-14 md:w-16 lg:w-24 xl:w-26 group relative rounded overflow-hidden"
  href={`/luchador/${id}`}
  data-id={id}
>
  <img
    class="aspect-[900/1200] h-full w-full object-cover"
    src={`/images/fighters/cards/${id}.png`}
    alt={`Tarjeta del boxeador ${name}`}
  />

  <div
    class="absolute inset-0 flex flex-col items-center justify-end bg-gradient-to-t from-pink-950/90 via-transparent to-transparent p-1 opacity-0 group-focus:opacity-100 group-hover:opacity-100 transition-opacity duration-300"
  >
    <h3 class="text-theme-tickle-me-pink text-sm">{name}</h3>
  </div>
</a>

<script>
  document.addEventListener("astro:page-load", () => {
    const boxerCards = document.querySelectorAll(".boxer-card");
    let timeoutId: number | null = null;

    // funcion de salida del hover
    function exitCardHover() {
      timeoutId = setTimeout(() => {
        const event = new CustomEvent("boxer-card-exit");
        document.dispatchEvent(event);

        if (document.activeElement instanceof HTMLElement) {
          document.activeElement.blur();
        }
      }, 500);
    }
    boxerCards.forEach((singleBoxerCard) => {
      const id = singleBoxerCard.getAttribute("data-id");

      singleBoxerCard.addEventListener("mouseenter", () => {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }

        if (id) {
          // Dispatch a custom event to notify a boxer card id is hovered
          const event = new CustomEvent("boxer-card-hovered", {
            detail: { id },
          });
          document.dispatchEvent(event);
        }
      });

      singleBoxerCard.addEventListener("mouseleave", () => {
        exitCardHover();
      });

      // Funcion para simular el hover en mobile: MobileHover
      function handleTouch(event: TouchEvent) {
        // eliminamos el timeout en cada movimiento
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        const touch = event.touches[0];

        const element = document.elementFromPoint(touch.clientX, touch.clientY);
        // el elemento detectado es el div dentro del a por lo que buscamos su a correspondiente
        const anchor = element?.closest("a");

        const anchorId = anchor?.getAttribute("data-id");
        if (!anchorId) {
          // si no se detecta id entonce eliminar el MobileHover
          exitCardHover();
          return;
        }

        const customEvent = new CustomEvent("boxer-card-hovered", {
          // usamos el id dentro del a
          detail: { id: anchorId },
        });
        document.dispatchEvent(customEvent);
        anchor?.focus();
      }

      // iniciamos el touch del MobileHover
      singleBoxerCard.addEventListener("touchstart", function (event) {
        handleTouch(event as TouchEvent);
      });

      // movimiento mientras se toca para el MobileHover
      singleBoxerCard.addEventListener("touchmove", function (event) {
        handleTouch(event as TouchEvent);
      });

      // cancelar el MobileHover en caso de que se cancele el touch
      singleBoxerCard.addEventListener("touchcancel", function (event) {
        exitCardHover();
      });

      // finalizar el MobileHover cuando se levanta el dedo
      singleBoxerCard.addEventListener("touchend", function (event) {
        exitCardHover();
      });
    });
  });
</script>
