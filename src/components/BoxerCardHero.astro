---
import BoxerCard from './BoxerCard.astro'

const { id, name, versus, class: extraClass } = Astro.props

interface Props {
  id: string
  name: string
  versus: string
  class: string
}
---
<BoxerCard
  id={id}
  name={name}
  class={`boxer-card ${extraClass} inline-block transition-all w-10 sm:w-14 md:w-16 lg:w-24 xl:w-26 group relative rounded-lg duration-300 hover:scale-110 hover:shadow-lg hover:z-20`}
  versus={versus}
  />

<script>
  document.addEventListener('astro:page-load', () => {
    const boxerCards = document.querySelectorAll('.boxer-card')
    let timeoutId: ReturnType<typeof setTimeout> | null = null
    let versusCard: HTMLAnchorElement | null = null
    let versusCardDiv: HTMLDivElement | null = null

    boxerCards.forEach((singleBoxerCard, index) => {
      singleBoxerCard.addEventListener('mouseenter', () => {
        if (timeoutId) {
          clearTimeout(timeoutId)
          timeoutId = null
        }

        const id = singleBoxerCard.getAttribute('data-id')
        if (id) {
          // Dispatch a custom event to notify a boxer card id is hovered
          const event = new CustomEvent('boxer-card-hovered', {
            detail: { id },
          })
          document.dispatchEvent(event)
        }
        // Aplicar la clase 'grayscale-100' a todas las tarjetas
        boxerCards.forEach((card) => card.classList.add('grayscale-100', 'opacity-40'))

        // Quitar la clase solo de la tarjeta sobre la que se está haciendo hover
        singleBoxerCard.classList.remove('grayscale-100', 'opacity-40')

        // Quitar la clase también de su par si existe
        const versus = singleBoxerCard.getAttribute('data-versus')
        if (versus) {
          versusCard = document.querySelector(`[data-id=${versus}]`) as HTMLAnchorElement
          
          versusCardDiv = versusCard.children[1] as HTMLDivElement
        
          versusCardDiv.classList.remove('translate-y-2')
          versusCardDiv.classList.add('opacity-100',"translate-y-0")

          versusCard.classList.remove('grayscale-100', 'opacity-40')
          versusCard.classList.add("shadow-lg")

          versusCard.children[0].children[2].classList.add('border-2',"opacity-100")
          versusCard.children[0].children[1].classList.add('translate-x-full')
          versusCard.children[0].children[0].classList.add('scale-110')

          versusCard.children[2].classList.add('w-2/3')
          // select the second div inside the versusCard
    
        
       
        }
      })

      singleBoxerCard.addEventListener('mouseleave', () => {
        timeoutId = setTimeout(() => {
          const event = new CustomEvent('boxer-card-exit')
          document.dispatchEvent(event)
        }, 500)

        // Restaurar la clase en todas las tarjetas cuando el mouse salga
        boxerCards.forEach((card) => card.classList.remove('grayscale-100', 'opacity-40'))
        // Quitar la clase de la tarjeta versus si existe
        if (versusCard) {
          versusCard.classList.remove("shadow-lg")
          versusCardDiv?.classList.remove('opacity-100',"translate-y-0")
          versusCardDiv?.classList.add('translate-y-2')

            
          versusCard.children[0].children[2].classList.remove('border-2',"opacity-100")
          versusCard.children[0].children[1].classList.remove('translate-x-full')
          versusCard.children[0].children[0].classList.remove('scale-110')
          versusCard.children[2].classList.remove('w-2/3')

          versusCardDiv = null
          versusCard = null
        }

      })

      singleBoxerCard.addEventListener('focus', () => {
        const id = singleBoxerCard.getAttribute('data-id')
        if (id) {
          const event = new CustomEvent('boxer-card-hovered', {
            detail: { id },
          })
          document.dispatchEvent(event)
        }
      })

      singleBoxerCard.addEventListener('blur', () => {
        timeoutId = setTimeout(() => {
          const event = new CustomEvent('boxer-card-exit')
          document.dispatchEvent(event)
        }, 500)
      })
    })

    function createParticles(element: HTMLElement) {
      for (let i = 0; i < 10; i++) {
        const particle = document.createElement('div')
        particle.className = 'absolute w-1 h-1 bg-theme-tickle-me-pink rounded-full'

        // Posición aleatoria alrededor de la tarjeta
        const angle = Math.random() * Math.PI * 2
        const radius = 50 + Math.random() * 20

        particle.style.left = `${50 + Math.cos(angle) * radius}%`
        particle.style.top = `${50 + Math.sin(angle) * radius}%`

        element.appendChild(particle)

        // Animación
        particle.animate(
          [
            { opacity: 1, transform: 'scale(1)' },
            { opacity: 0, transform: 'scale(0)' },
          ],
          {
            duration: 1000,
            fill: 'forwards',
          },
        ).onfinish = () => particle.remove()
      }
    }

    boxerCards.forEach((card) => {
      card.addEventListener('mouseenter', () => {
        createParticles(card as HTMLElement)
      })
    })
  })
</script>
